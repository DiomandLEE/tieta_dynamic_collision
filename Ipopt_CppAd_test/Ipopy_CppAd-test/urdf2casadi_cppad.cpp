#include <iostream>
#include <cppad/ipopt/solve.hpp>
#include <vector>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

using namespace std;
using CppAD::AD;
typedef CPPAD_TESTVECTOR(AD<double>) ADvector;

int casadi_f0(ADvector arg, ADvector& res) {
  AD<double> a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a25, a26, a3, a4, a5, a6, a7, a8, a9;
  a0= arg[0];
  a1=CppAD::cos(a0);
  a2=4.8965888601467475e-12;
  a3= arg[1];
  a4=CppAD::cos(a3);
  a5=(a2*a4);
  a3=CppAD::sin(a3);
  a5=(a5-a3);
  a6=(a1*a5);
  a7= arg[2];
  a8=CppAD::cos(a7);
  a9=(a6*a8);
  a10=(a2*a3);
  a10=(a10+a4);
  a11=(a1*a10);
  a7=CppAD::sin(a7);
  a12=(a11*a7);
  a9=(a9-a12);
  a12= arg[3];
  a13=CppAD::cos(a12);
  a14=(a2*a13);
  a12=CppAD::sin(a12);
  a14=(a14-a12);
  a15=(a9*a14);
  a6=(a6*a7);
  a16=(a11*a8);
  a6=(a6+a16);
  a16=(a2*a12);
  a16=(a13+a16);
  a17=(a6*a16);
  a15=(a15-a17);
  a17=arg[4];
  a18=CppAD::cos(a17);
  a19=(a15*a18);
  a0=CppAD::sin(a0);
  a17=CppAD::sin(a17);
  a20=(a0*a17);
  a19=(a19-a20);
  a20=arg[5];
  a21=CppAD::cos(a20);
  a22=(a19*a21);
  a23=(a2*a12);
  a23=(a23+a13);
  a9=(a9*a23);
  a13=(a2*a13);
  a13=(a13-a12);
  a12=(a6*a13);
  a9=(a9+a12);
  a20=CppAD::sin(a20);
  a12=(a9*a20);
  a22=(a22-a12);
  res.push_back(a22); // if (res[0]!=0) res[0][0]=a22;
  a5=(a0*a5);
  a22=(a5*a8);
  a10=(a0*a10);
  a12=(a10*a7);
  a22=(a22-a12);
  a12=(a22*a14);
  a5=(a5*a7);
  a24=(a10*a8);
  a5=(a5+a24);
  a24=(a5*a16);
  a12=(a12-a24);
  a24=(a12*a18);
  a25=(a1*a17);
  a24=(a24+a25);
  a25=(a24*a21);
  a22=(a22*a23);
  a26=(a5*a13);
  a22=(a22+a26);
  a26=(a22*a20);
  a25=(a25-a26);
  res.push_back(a25); // if (res[0]!=0) res[0][1]=a25;
  a25=(a2*a3);
  a25=(a4+a25);
  a26=(a25*a8);
  a4=(a2*a4);
  a4=(a4-a3);
  a3=(a4*a7);
  a26=(a26+a3);
  a14=(a26*a14);
  a8=(a4*a8);
  a25=(a25*a7);
  a8=(a8-a25);
  a16=(a8*a16);
  a14=(a14+a16);
  a16=(a14*a18);
  a25=(a16*a21);
  a13=(a8*a13);
  a26=(a26*a23);
  a13=(a13-a26);
  a26=(a13*a20);
  a25=(a25+a26);
  a25=(-a25);
  res.push_back(a25); // if (res[0]!=0) res[0][2]=a25;
  a25=0.;
  res.push_back(a25); // if (res[0]!=0) res[0][3]=a25;
  a15=(a15*a17);
  a26=(a0*a18);
  a15=(a15+a26);
  a26=(a2*a15);
  a19=(a19*a20);
  a23=(a9*a21);
  a19=(a19+a23);
  a26=(a26+a19);
  a26=(-a26);
  res.push_back(a26); // if (res[0]!=0) res[0][4]=a26;
  a18=(a1*a18);
  a12=(a12*a17);
  a18=(a18-a12);
  a12=(a2*a18);
  a24=(a24*a20);
  a26=(a22*a21);
  a24=(a24+a26);
  a12=(a12-a24);
  res.push_back(a12); // if (res[0]!=0) res[0][5]=a12;
  a14=(a14*a17);
  a17=(a2*a14);
  a21=(a13*a21);
  a16=(a16*a20);
  a21=(a21-a16);
  a17=(a17-a21);
  res.push_back(a17); //if (res[0]!=0) res[0][6]=a17;
  res.push_back(a25); //if (res[0]!=0) res[0][7]=a25;
  a19=(a2*a19);
  a19=(a19-a15);
  res.push_back(a19); //if (res[0]!=0) res[0][8]=a19;
  a24=(a2*a24);
  a24=(a18+a24);
  res.push_back(a24); //if (res[0]!=0) res[0][9]=a24;
  a2=(a2*a21);
  a2=(a14+a2);
  res.push_back(a2); //if (res[0]!=0) res[0][10]=a2;
  res.push_back(a25); //if (res[0]!=0) res[0][11]=a25;
  a25=9.4649999999999998e-02;
  a9=(a25*a9);
  a2=3.9224999999999999e-01;
  a6=(a2*a6);
  a21=4.2499999999999999e-01;
  a11=(a21*a11);
  a24=-1.1970000000000000e-01;
  a19=(a24*a0);
  a11=(a11-a19);
  a19=1.3585000000000000e-01;
  a17=(a19*a0);
  a11=(a11-a17);
  a6=(a6+a11);
  a11=9.2999999999999999e-02;
  a0=(a11*a0);
  a6=(a6-a0);
  a9=(a9+a6);
  a6=8.2299999999999998e-02;
  a15=(a6*a15);
  a9=(a9-a15);
  res.push_back(a9); //if (res[0]!=0) res[0][12]=a9;
  a18=(a6*a18);
  a22=(a25*a22);
  a11=(a11*a1);
  a5=(a2*a5);
  a24=(a24*a1);
  a10=(a21*a10);
  a24=(a24+a10);
  a19=(a19*a1);
  a24=(a24+a19);
  a5=(a5+a24);
  a11=(a11+a5);
  a22=(a22+a11);
  a18=(a18+a22);
  res.push_back(a18); //if (res[0]!=0) res[0][13]=a18;
  a6=(a6*a14);
  a25=(a25*a13);
  a2=(a2*a8);
  a21=(a21*a4);
  a4=8.9159000000000002e-02;
  a21=(a21+a4);
  a2=(a2+a21);
  a25=(a25+a2);
  a6=(a6+a25);
  res.push_back(a6); //if (res[0]!=0) res[0][14]=a6;
  a6=1.;
  res.push_back(a6); //if (res[0]!=0) res[0][15]=a6;
  return 0;
}

int T_fk(ADvector arg, ADvector& res){
  return casadi_f0(arg, res);
}

int casadi_wrist_sphere(ADvector arg, ADvector& res) {
    //read here arg.size() = 7:
    //['base_y_base_x', 'base_theta_base_y', 'base_link_base_theta', 'right_arm_shoulder_pan_joint', 'right_arm_shoulder_lift_joint', 'right_arm_elbow_joint', 'right_arm_wrist_1_joint']
    AD<double> a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a25, a26, a3, a4, a5, a6, a7, a8, a9;
    a0=1.2246467991473532e-16;
    a1 = arg[2]; // a1=arg[0]? arg[0][2] : 0;
    a2=cos(a1);
    a3=6.1232339957367660e-17;
    a4=-7.0710678118654746e-01;
    a1=sin(a1);
    a5=(a4*a1);
    a6=(a3*a5);
    a6=(a2-a6);
    a7=-6.1232339957367660e-17;
    a8=7.0710678118654757e-01;
    a9=(a8*a1);
    a10=(a7*a9);
    a6=(a6-a10);
    a10=(a0*a6);
    a11=(a3*a2);
    a11=(a11-a9);
    a10=(a10-a11);
    a12 = arg[3]; // a12=arg[0]? arg[0][3] : 0;
    a13=cos(a12);
    a14=(a10*a13);
    a15=-1.2246467991473532e-16;
    a11=(a15*a11);
    a11=(a11-a6);
    a12=sin(a12);
    a6=(a11*a12);
    a14=(a14+a6);
    a6 = arg[4]; // a6=arg[0]? arg[0][4] : 0;
    a16=cos(a6);
    a17=(a14*a16);
    a11=(a11*a13);
    a10=(a10*a12);
    a11=(a11-a10);
    a10=-2.0510342851533115e-10;
    a6=sin(a6);
    a18=(a10*a6);
    a19=(a11*a18);
    a17=(a17+a19);
    a19=(a7*a2);
    a19=(a19-a5);
    a5=3.7493994566546440e-33;
    a9=(a5*a9);
    a19=(a19-a9);
    a9=(a19*a6);
    a17=(a17+a9);
    a9 = arg[5]; // a9=arg[0]? arg[0][5] : 0;
    a20=cos(a9);
    a21=(a17*a20);
    a22=(a10*a16);
    a23=(a11*a22);
    a14=(a14*a6);
    a23=(a23-a14);
    a14=(a19*a16);
    a23=(a23+a14);
    a9=sin(a9);
    a14=(a23*a9);
    a21=(a21+a14);
    a14 = arg[6]; // a14=arg[0]? arg[0][6] : 0;
    a24=cos(a14);
    a25=(a21*a24);
    a23=(a23*a20);
    a26=(a17*a9);
    a23=(a23-a26);
    a14=sin(a14);
    a26=(a23*a14);
    a25=(a25+a26);
    res[0] = a25; // if (res[0]!=0) res[0][0]=a25;
    a4=(a4*a2);
    a25=(a3*a4);
    a25=(a1+a25);
    a8=(a8*a2);
    a26=(a7*a8);
    a25=(a25+a26);
    a0=(a0*a25);
    a3=(a3*a1);
    a3=(a3+a8);
    a0=(a0-a3);
    a26=(a0*a13);
    a15=(a15*a3);
    a15=(a15-a25);
    a25=(a15*a12);
    a26=(a26+a25);
    a25=(a26*a16);
    a15=(a15*a13);
    a0=(a0*a12);
    a15=(a15-a0);
    a0=(a15*a18);
    a25=(a25+a0);
    a7=(a7*a1);
    a7=(a7+a4);
    a5=(a5*a8);
    a7=(a7+a5);
    a5=(a7*a6);
    a25=(a25+a5);
    a5=(a25*a20);
    a8=(a15*a22);
    a26=(a26*a6);
    a8=(a8-a26);
    a26=(a7*a16);
    a8=(a8+a26);
    a26=(a8*a9);
    a5=(a5+a26);
    a26=(a5*a24);
    a8=(a8*a20);
    a4=(a25*a9);
    a8=(a8-a4);
    a4=(a8*a14);
    a26=(a26+a4);
    res[1] = a26; // if (res[0]!=0) res[0][1]=a26;
    a26=7.0710678118654746e-01;
    a4=(a26*a13);
    a0=8.6595605623549329e-17;
    a3=(a0*a12);
    a4=(a4+a3);
    a3=(a4*a16);
    a0=(a0*a13);
    a26=(a26*a12);
    a0=(a0-a26);
    a18=(a0*a18);
    a3=(a3+a18);
    a18=-7.0710678118654757e-01;
    a26=(a18*a6);
    a3=(a3+a26);
    a26=(a3*a20);
    a22=(a0*a22);
    a4=(a4*a6);
    a22=(a22-a4);
    a18=(a18*a16);
    a22=(a22+a18);
    a18=(a22*a9);
    a26=(a26+a18);
    a18=(a26*a24);
    a22=(a22*a20);
    a9=(a3*a9);
    a22=(a22-a9);
    a9=(a22*a14);
    a18=(a18+a9);
    res[2] = a18; // if (res[0]!=0) res[0][2]=a18;
    a18=0.;
    res[3] = a18; //if (res[0] != 0) res[0][3] = a18;
    a23=(a23*a24);
    a9=(a21*a14);
    a23=(a23-a9);
    res[4] = a23; // if (res[0]!=0) res[0][4]=a23;
    a8=(a8*a24);
    a9=(a5*a14);
    a8=(a8-a9);
    res[5] = a8; // if (res[0]!=0) res[0][5]=a8;
    a22=(a22*a24);
    a14=(a26*a14);
    a22=(a22-a14);
    res[6] = a22; // if (res[0]!=0) res[0][6]=a22;
    res[7] = a18; // if (res[0]!=0) res[0][7]=a18;
    a14=(a10*a19);
    a14=(a14-a11);
    res[8] = a14; // if (res[0]!=0) res[0][8]=a14;
    a10=(a10*a7);
    a10=(a10-a15);
    res[9] = a10; // if (res[0]!=0) res[0][9]=a10;
    a15=1.4503002514780097e-10;
    a15=(a15-a0);
    res[10] = a15; // if (res[0]!=0) res[0][10]=a15;
    res[11] = a18; // if (res[0]!=0) res[0][11]=a18;
    a18=-4.0000000000000001e-02;
    a23=(a18*a23);
    a0=-1.0000000000000000e-02;
    a11=(a0*a14);
    a23=(a23+a11);
    a11=-3.9219999999999999e-01;
    a21=(a11*a21);
    a24=1.3330000000000000e-01;
    a14=(a24*a14);
    a21=(a21+a14);
    a14=-4.2499999999999999e-01;
    a17=(a14*a17);
    a9=1.6250000000000001e-01;
    a19=(a9*a19);
    a20=2.0000000000000001e-01;
    a16=(a20*a2);
    a4=-2.2000000000000000e-01;
    a6=(a4*a1);
    a16=(a16-a6);
    a6 = arg[0]; // a6=arg[0]? arg[0][0] : 0;
    a16=(a16+a6);
    a19=(a19+a16);
    a17=(a17+a19);
    a21=(a21+a17);
    a23=(a23+a21);
    res[12] = a23; // if (res[0]!=0) res[0][12]=a23;
    a8=(a18*a8);
    a23=(a0*a10);
    a8=(a8+a23);
    a5=(a11*a5);
    a10=(a24*a10);
    a5=(a5+a10);
    a25=(a14*a25);
    a9=(a9*a7);
    a20=(a20*a1);
    a4=(a4*a2);
    a20=(a20+a4);
    a4 = arg[1]; // a4=arg[0]? arg[0][1] : 0;
    a20=(a20+a4);
    a9=(a9+a20);
    a25=(a25+a9);
    a5=(a5+a25);
    a8=(a8+a5);
    res[13] = a8; // if (res[0]!=0) res[0][13]=a8;
    a18=(a18*a22);
    a0=(a0*a15);
    a18=(a18+a0);
    a11=(a11*a26);
    a24=(a24*a15);
    a11=(a11+a24);
    a14=(a14*a3);
    a3=1.1180951480571861e+00;
    a14=(a14+a3);
    a11=(a11+a14);
    a18=(a18+a11);
    res[14] = a18; // if (res[0]!=0) res[0][14]=a18;
    a18=1.;
    res[15] = a18; // if (res[0]!=0) res[0][15]=a18;
    return 0;
}
int casadi_shoulder_sphere(ADvector arg, ADvector& res)
{
    /* T_fk:(i0[5])->(o0[4x4]) */
    //read arg.size():5
    //['base_y_base_x', 'base_theta_base_y', 'base_link_base_theta', 'right_arm_shoulder_pan_joint', 'right_arm_shoulder_lift_joint']
    AD<double> a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a3, a4, a5, a6, a7, a8, a9;
    a0=1.2246467991473532e-16;
    a1 = arg[2]; // a1=arg[0]? arg[0][2] : 0;
    a2=cos(a1);
    a3=6.1232339957367660e-17;
    a4=-7.0710678118654746e-01;
    a1=sin(a1);
    a5=(a4*a1);
    a6=(a3*a5);
    a6=(a2-a6);
    a7=-6.1232339957367660e-17;
    a8=7.0710678118654757e-01;
    a9=(a8*a1);
    a10=(a7*a9);
    a6=(a6-a10);
    a10=(a0*a6);
    a11=(a3*a2);
    a11=(a11-a9);
    a10=(a10-a11);
    a12 = arg[3]; // a12=arg[0]? arg[0][3] : 0;
    a13=cos(a12);
    a14=(a10*a13);
    a15=-1.2246467991473532e-16;
    a11=(a15*a11);
    a11=(a11-a6);
    a12=sin(a12);
    a6=(a11*a12);
    a14=(a14+a6);
    a6 = arg[4]; // a6=arg[0]? arg[0][4] : 0;
    a16=cos(a6);
    a17=(a14*a16);
    a11=(a11*a13);
    a10=(a10*a12);
    a11=(a11-a10);
    a10=-2.0510342851533115e-10;
    a6=sin(a6);
    a18=(a10*a6);
    a19=(a11*a18);
    a17=(a17+a19);
    a19=(a7*a2);
    a19=(a19-a5);
    a5=3.7493994566546440e-33;
    a9=(a5*a9);
    a19=(a19-a9);
    a9=(a19*a6);
    a17=(a17+a9);
    res[0] = a17; // if (res[0]!=0) res[0][0]=a17;
    a4=(a4*a2);
    a17=(a3*a4);
    a17=(a1+a17);
    a8=(a8*a2);
    a9=(a7*a8);
    a17=(a17+a9);
    a0=(a0*a17);
    a3=(a3*a1);
    a3=(a3+a8);
    a0=(a0-a3);
    a9=(a0*a13);
    a15=(a15*a3);
    a15=(a15-a17);
    a17=(a15*a12);
    a9=(a9+a17);
    a17=(a9*a16);
    a15=(a15*a13);
    a0=(a0*a12);
    a15=(a15-a0);
    a0=(a15*a18);
    a17=(a17+a0);
    a7=(a7*a1);
    a7=(a7+a4);
    a5=(a5*a8);
    a7=(a7+a5);
    a5=(a7*a6);
    a17=(a17+a5);
    res[1] = a17; // if (res[0]!=0) res[0][1]=a17;
    a17=7.0710678118654746e-01;
    a5=(a17*a13);
    a8=8.6595605623549329e-17;
    a4=(a8*a12);
    a5=(a5+a4);
    a4=(a5*a16);
    a8=(a8*a13);
    a17=(a17*a12);
    a8=(a8-a17);
    a18=(a8*a18);
    a4=(a4+a18);
    a18=-7.0710678118654757e-01;
    a17=(a18*a6);
    a4=(a4+a17);
    res[2] = a4; // if (res[0]!=0) res[0][2]=a4;
    a4=0.;
    res[3] = a4; // if (res[0]!=0) res[0][3]=a4;
    a17=(a10*a16);
    a12=(a11*a17);
    a14=(a14*a6);
    a12=(a12-a14);
    a14=(a19*a16);
    a12=(a12+a14);
    res[4] = a12; // if (res[0]!=0) res[0][4]=a12;
    a12=(a15*a17);
    a9=(a9*a6);
    a12=(a12-a9);
    a9=(a7*a16);
    a12=(a12+a9);
    res[5] = a12; // if (res[0]!=0) res[0][5]=a12;
    a17=(a8*a17);
    a5=(a5*a6);
    a17=(a17-a5);
    a18=(a18*a16);
    a17=(a17+a18);
    res[6] = a17; // if (res[0]!=0) res[0][6]=a17;
    res[7] = a4;  // if (res[0]!=0) res[0][7]=a4;
    a17=(a10*a19);
    a17=(a17-a11);
    res[8] = a17; // if (res[0]!=0) res[0][8]=a17;
    a10=(a10*a7);
    a10=(a10-a15);
    res[9] = a10; // if (res[0]!=0) res[0][9]=a10;
    a15=1.4503002514780097e-10;
    a15=(a15-a8);
    res[10] = a15; // if (res[0]!=0) res[0][10]=a15;
    res[11] = a4;  // if (res[0]!=0) res[0][11]=a4;
    a4=8.0000000000000002e-02;
    a17=(a4*a17);
    a8=1.6250000000000001e-01;
    a19=(a8*a19);
    a11=2.0000000000000001e-01;
    a18=(a11*a2);
    a16=-2.2000000000000000e-01;
    a5=(a16*a1);
    a18=(a18-a5);
    a5 = arg[0]; // a5=arg[0]? arg[0][0] : 0;
    a18=(a18+a5);
    a19=(a19+a18);
    a17=(a17+a19);
    res[12] = a17; // if (res[0]!=0) res[0][12]=a17;
    a10=(a4*a10);
    a8=(a8*a7);
    a11=(a11*a1);
    a16=(a16*a2);
    a11=(a11+a16);
    a16 = arg[1]; // a16=arg[0]? arg[0][1] : 0;
    a11=(a11+a16);
    a8=(a8+a11);
    a10=(a10+a8);
    res[13] = a10; // if (res[0]!=0) res[0][13]=a10;
    a4=(a4*a15);
    a15=1.1180951480571861e+00;
    a4=(a4+a15);
    res[14] = a4; // if (res[0]!=0) res[0][14]=a4;
    a4=1.;
    res[15] = a4; // if (res[0]!=0) res[0][15]=a4;
    return 0;
}
int casadi_elbow_sphere(ADvector arg, ADvector& res){
    /* T_fk:(i0[6])->(o0[4x4]) */
    //read arg.size():6
    //['base_y_base_x', 'base_theta_base_y', 'base_link_base_theta', 'right_arm_shoulder_pan_joint', 'right_arm_shoulder_lift_joint', 'right_arm_elbow_joint']
    AD<double> a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a3, a4, a5, a6, a7, a8, a9;
    a0=1.2246467991473532e-16;
    a1 = arg[2]; // a1=arg[0]? arg[0][2] : 0;
    a2=cos(a1);
    a3=6.1232339957367660e-17;
    a4=-7.0710678118654746e-01;
    a1=sin(a1);
    a5=(a4*a1);
    a6=(a3*a5);
    a6=(a2-a6);
    a7=-6.1232339957367660e-17;
    a8=7.0710678118654757e-01;
    a9=(a8*a1);
    a10=(a7*a9);
    a6=(a6-a10);
    a10=(a0*a6);
    a11=(a3*a2);
    a11=(a11-a9);
    a10=(a10-a11);
    a12 = arg[3]; // a12=arg[0]? arg[0][3] : 0;
    a13=cos(a12);
    a14=(a10*a13);
    a15=-1.2246467991473532e-16;
    a11=(a15*a11);
    a11=(a11-a6);
    a12=sin(a12);
    a6=(a11*a12);
    a14=(a14+a6);
    a6 = arg[4]; // a6=arg[0]? arg[0][4] : 0;
    a16=cos(a6);
    a17=(a14*a16);
    a11=(a11*a13);
    a10=(a10*a12);
    a11=(a11-a10);
    a10=-2.0510342851533115e-10;
    a6=sin(a6);
    a18=(a10*a6);
    a19=(a11*a18);
    a17=(a17+a19);
    a19=(a7*a2);
    a19=(a19-a5);
    a5=3.7493994566546440e-33;
    a9=(a5*a9);
    a19=(a19-a9);
    a9=(a19*a6);
    a17=(a17+a9);
    a9 = arg[5]; // a9=arg[0]? arg[0][5] : 0;
    a20=cos(a9);
    a21=(a17*a20);
    a22=(a10*a16);
    a23=(a11*a22);
    a14=(a14*a6);
    a23=(a23-a14);
    a14=(a19*a16);
    a23=(a23+a14);
    a9=sin(a9);
    a14=(a23*a9);
    a21=(a21+a14);
    res[0] = a21; // if (res[0]!=0) res[0][0]=a21;
    a4=(a4*a2);
    a21=(a3*a4);
    a21=(a1+a21);
    a8=(a8*a2);
    a14=(a7*a8);
    a21=(a21+a14);
    a0=(a0*a21);
    a3=(a3*a1);
    a3=(a3+a8);
    a0=(a0-a3);
    a14=(a0*a13);
    a15=(a15*a3);
    a15=(a15-a21);
    a21=(a15*a12);
    a14=(a14+a21);
    a21=(a14*a16);
    a15=(a15*a13);
    a0=(a0*a12);
    a15=(a15-a0);
    a0=(a15*a18);
    a21=(a21+a0);
    a7=(a7*a1);
    a7=(a7+a4);
    a5=(a5*a8);
    a7=(a7+a5);
    a5=(a7*a6);
    a21=(a21+a5);
    a5=(a21*a20);
    a8=(a15*a22);
    a14=(a14*a6);
    a8=(a8-a14);
    a14=(a7*a16);
    a8=(a8+a14);
    a14=(a8*a9);
    a5=(a5+a14);
    res[1] = a5; // if (res[0]!=0) res[0][1]=a5;
    a5=7.0710678118654746e-01;
    a14=(a5*a13);
    a4=8.6595605623549329e-17;
    a0=(a4*a12);
    a14=(a14+a0);
    a0=(a14*a16);
    a4=(a4*a13);
    a5=(a5*a12);
    a4=(a4-a5);
    a18=(a4*a18);
    a0=(a0+a18);
    a18=-7.0710678118654757e-01;
    a5=(a18*a6);
    a0=(a0+a5);
    a5=(a0*a20);
    a22=(a4*a22);
    a14=(a14*a6);
    a22=(a22-a14);
    a18=(a18*a16);
    a22=(a22+a18);
    a18=(a22*a9);
    a5=(a5+a18);
    res[2] = a5; // if (res[0]!=0) res[0][2]=a5;
    a5=0.;
    res[3] = a5; // if (res[0]!=0) res[0][3]=a5;
    a23=(a23*a20);
    a18=(a17*a9);
    a23=(a23-a18);
    res[4] = a23; // if (res[0]!=0) res[0][4]=a23;
    a8=(a8*a20);
    a18=(a21*a9);
    a8=(a8-a18);
    res[5] = a8; // if (res[0]!=0) res[0][5]=a8;
    a22=(a22*a20);
    a9=(a0*a9);
    a22=(a22-a9);
    res[6] = a22; //if (res[0]!=0) res[0][6]=a22;
    res[7] = a5;  // if (res[0]!=0) res[0][7]=a5;
    a9=(a10*a19);
    a9=(a9-a11);
    res[8] = a9; // if (res[0]!=0) res[0][8]=a9;
    a10=(a10*a7);
    a10=(a10-a15);
    res[9] = a10; // if (res[0]!=0) res[0][9]=a10;
    a15=1.4503002514780097e-10;
    a15=(a15-a4);
    res[10] = a15; // if (res[0]!=0) res[0][10]=a15;
    res[11] = a5;  // if (res[0]!=0) res[0][11]=a5;
    a5=2.0000000000000000e-02;
    a23=(a5*a23);
    a4=8.9999999999999997e-02;
    a9=(a4*a9);
    a23=(a23+a9);
    a9=-4.2499999999999999e-01;
    a17=(a9*a17);
    a11=1.6250000000000001e-01;
    a19=(a11*a19);
    a20=2.0000000000000001e-01;
    a18=(a20*a2);
    a16=-2.2000000000000000e-01;
    a14=(a16*a1);
    a18=(a18-a14);
    a14 = arg[0]; // a14=arg[0]? arg[0][0] : 0;
    a18=(a18+a14);
    a19=(a19+a18);
    a17=(a17+a19);
    a23=(a23+a17);
    res[12] = a23; // if (res[0]!=0) res[0][12]=a23;
    a8=(a5*a8);
    a10=(a4*a10);
    a8=(a8+a10);
    a21=(a9*a21);
    a11=(a11*a7);
    a20=(a20*a1);
    a16=(a16*a2);
    a20=(a20+a16);
    a16 = arg[1]; // a16=arg[0]? arg[0][1] : 0;
    a20=(a20+a16);
    a11=(a11+a20);
    a21=(a21+a11);
    a8=(a8+a21);
    res[13] = a8; // if (res[0]!=0) res[0][13]=a8;
    a5=(a5*a22);
    a4=(a4*a15);
    a5=(a5+a4);
    a9=(a9*a0);
    a0=1.1180951480571861e+00;
    a9=(a9+a0);
    a5=(a5+a9);
    res[14] = a5; // if (res[0]!=0) res[0][14]=a5;
    a5=1.;
    res[15] = a5; // if (res[0]!=0) res[0][15]=a5;
    return 0;
}
int casadi_gripper_sphere(ADvector arg, ADvector& res){
    /* T_fk:(i0[9])->(o0[4x4]) */
    //read here arg.size():9
    //['base_y_base_x', 'base_theta_base_y', 'base_link_base_theta', 'right_arm_shoulder_pan_joint', 'right_arm_shoulder_lift_joint', 'right_arm_elbow_joint', 'right_arm_wrist_1_joint', 'right_arm_wrist_2_joint', 'right_arm_wrist_3_joint']
    AD<double> a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a3, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a4, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a5, a50, a51, a52, a53, a6, a7, a8, a9;
    a0=3.7493994566546440e-33;
    a1=1.2246467991473532e-16;
    a2 = arg[2]; // a2=arg[0]? arg[0][2] : 0;
    a3=cos(a2);
    a4=6.1232339957367660e-17;
    a5=-7.0710678118654746e-01;
    a2=sin(a2);
    a6=(a5*a2);
    a7=(a4*a6);
    a7=(a3-a7);
    a8=-6.1232339957367660e-17;
    a9=7.0710678118654757e-01;
    a10=(a9*a2);
    a11=(a8*a10);
    a7=(a7-a11);
    a11=(a1*a7);
    a12=(a4*a3);
    a12=(a12-a10);
    a11=(a11-a12);
    a13 = arg[3]; // a13=arg[0]? arg[0][3] : 0;
    a14=cos(a13);
    a15=(a11*a14);
    a16=-1.2246467991473532e-16;
    a12=(a16*a12);
    a12=(a12-a7);
    a13=sin(a13);
    a7=(a12*a13);
    a15=(a15+a7);
    a7 = arg[4]; // a7=arg[0]? arg[0][4] : 0;
    a17=cos(a7);
    a18=(a15*a17);
    a12=(a12*a14);
    a11=(a11*a13);
    a12=(a12-a11);
    a11=-2.0510342851533115e-10;
    a7=sin(a7);
    a19=(a11*a7);
    a20=(a12*a19);
    a18=(a18+a20);
    a20=(a8*a3);
    a20=(a20-a6);
    a10=(a0*a10);
    a20=(a20-a10);
    a10=(a20*a7);
    a18=(a18+a10);
    a10 = arg[5]; // a10=arg[0]? arg[0][5] : 0;
    a6=cos(a10);
    a21=(a18*a6);
    a22=(a11*a17);
    a23=(a12*a22);
    a15=(a15*a7);
    a23=(a23-a15);
    a15=(a20*a17);
    a23=(a23+a15);
    a10=sin(a10);
    a15=(a23*a10);
    a21=(a21+a15);
    a15 = arg[6]; // a15=arg[0]? arg[0][6] : 0;
    a24=cos(a15);
    a25=(a21*a24);
    a23=(a23*a6);
    a26=(a18*a10);
    a23=(a23-a26);
    a15=sin(a15);
    a26=(a23*a15);
    a25=(a25+a26);
    a26 = arg[7]; // a26=arg[0]? arg[0][7] : 0;
    a27=cos(a26);
    a28=(a25*a27);
    a23=(a23*a24);
    a29=(a21*a15);
    a23=(a23-a29);
    a26=sin(a26);
    a29=(a11*a26);
    a30=(a23*a29);
    a28=(a28+a30);
    a30=(a11*a20);
    a30=(a30-a12);
    a12=(a30*a26);
    a28=(a28+a12);
    a12 = arg[8]; // a12=arg[0]? arg[0][8] : 0;
    a31=cos(a12);
    a32=-1.2246467993985327e-16;
    a12=sin(a12);
    a33=(a32*a12);
    a33=(a31+a33);
    a34=(a28*a33);
    a35=(a11*a27);
    a36=(a23*a35);
    a25=(a25*a26);
    a36=(a36-a25);
    a25=(a30*a27);
    a36=(a36+a25);
    a25=(a16*a31);
    a37=-2.0510355098001109e-10;
    a38=(a37*a12);
    a25=(a25+a38);
    a38=(a36*a25);
    a34=(a34+a38);
    a38=(a11*a30);
    a38=(a38-a23);
    a39=(a16*a31);
    a39=(a39-a12);
    a40=(a38*a39);
    a34=(a34+a40);
    a40=(a0*a34);
    a32=(a32*a31);
    a32=(a32-a12);
    a41=(a28*a32);
    a42=(a37*a31);
    a43=(a16*a12);
    a42=(a42-a43);
    a43=(a36*a42);
    a41=(a41+a43);
    a12=(a16*a12);
    a12=(a12+a31);
    a31=(a38*a12);
    a41=(a41-a31);
    a31=(a8*a41);
    a40=(a40+a31);
    a31=1.2246467988961737e-16;
    a28=(a31*a28);
    a28=(a28+a36);
    a43=(a37*a38);
    a28=(a28+a43);
    a40=(a40+a28);
    res[0] = a40; // if (res[0]!=0) res[0][0]=a40;
    a5=(a5*a3);
    a43=(a4*a5);
    a43=(a2+a43);
    a9=(a9*a3);
    a44=(a8*a9);
    a43=(a43+a44);
    a1=(a1*a43);
    a44=(a4*a2);
    a44=(a44+a9);
    a1=(a1-a44);
    a45=(a1*a14);
    a16=(a16*a44);
    a16=(a16-a43);
    a43=(a16*a13);
    a45=(a45+a43);
    a43=(a45*a17);
    a16=(a16*a14);
    a1=(a1*a13);
    a16=(a16-a1);
    a1=(a16*a19);
    a43=(a43+a1);
    a1=(a8*a2);
    a1=(a1+a5);
    a9=(a0*a9);
    a1=(a1+a9);
    a9=(a1*a7);
    a43=(a43+a9);
    a9=(a43*a6);
    a5=(a16*a22);
    a45=(a45*a7);
    a5=(a5-a45);
    a45=(a1*a17);
    a5=(a5+a45);
    a45=(a5*a10);
    a9=(a9+a45);
    a45=(a9*a24);
    a5=(a5*a6);
    a44=(a43*a10);
    a5=(a5-a44);
    a44=(a5*a15);
    a45=(a45+a44);
    a44=(a45*a27);
    a5=(a5*a24);
    a46=(a9*a15);
    a5=(a5-a46);
    a46=(a5*a29);
    a44=(a44+a46);
    a46=(a11*a1);
    a46=(a46-a16);
    a16=(a46*a26);
    a44=(a44+a16);
    a16=(a44*a33);
    a47=(a5*a35);
    a45=(a45*a26);
    a47=(a47-a45);
    a45=(a46*a27);
    a47=(a47+a45);
    a45=(a47*a25);
    a16=(a16+a45);
    a45=(a11*a46);
    a45=(a45-a5);
    a48=(a45*a39);
    a16=(a16+a48);
    a48=(a0*a16);
    a49=(a44*a32);
    a50=(a47*a42);
    a49=(a49+a50);
    a50=(a45*a12);
    a49=(a49-a50);
    a50=(a8*a49);
    a48=(a48+a50);
    a44=(a31*a44);
    a44=(a44+a47);
    a50=(a37*a45);
    a44=(a44+a50);
    a48=(a48+a44);
    res[1] = a48; // if (res[0]!=0) res[0][1]=a48;
    a50=7.0710678118654746e-01;
    a51=(a50*a14);
    a52=8.6595605623549329e-17;
    a53=(a52*a13);
    a51=(a51+a53);
    a53=(a51*a17);
    a52=(a52*a14);
    a50=(a50*a13);
    a52=(a52-a50);
    a19=(a52*a19);
    a53=(a53+a19);
    a19=-7.0710678118654757e-01;
    a50=(a19*a7);
    a53=(a53+a50);
    a50=(a53*a6);
    a22=(a52*a22);
    a51=(a51*a7);
    a22=(a22-a51);
    a19=(a19*a17);
    a22=(a22+a19);
    a19=(a22*a10);
    a50=(a50+a19);
    a19=(a50*a24);
    a22=(a22*a6);
    a10=(a53*a10);
    a22=(a22-a10);
    a10=(a22*a15);
    a19=(a19+a10);
    a10=(a19*a27);
    a22=(a22*a24);
    a15=(a50*a15);
    a22=(a22-a15);
    a29=(a22*a29);
    a10=(a10+a29);
    a29=1.4503002514780097e-10;
    a29=(a29-a52);
    a52=(a29*a26);
    a10=(a10+a52);
    a33=(a10*a33);
    a35=(a22*a35);
    a19=(a19*a26);
    a35=(a35-a19);
    a27=(a29*a27);
    a35=(a35+a27);
    a25=(a35*a25);
    a33=(a33+a25);
    a11=(a11*a29);
    a11=(a11-a22);
    a39=(a11*a39);
    a33=(a33+a39);
    a0=(a0*a33);
    a32=(a10*a32);
    a42=(a35*a42);
    a32=(a32+a42);
    a12=(a11*a12);
    a32=(a32-a12);
    a12=(a8*a32);
    a0=(a0+a12);
    a31=(a31*a10);
    a31=(a31+a35);
    a37=(a37*a11);
    a31=(a31+a37);
    a0=(a0+a31);
    res[2] = a0; // if (res[0]!=0) res[0][2]=a0;
    a37=0.;
    res[3] = a37; // if (res[0]!=0) res[0][3]=a37;
    a10=(a4*a41);
    a10=(a34+a10);
    res[4] = a10; // if (res[0]!=0) res[0][4]=a10;
    a10=(a4*a49);
    a10=(a16+a10);
    res[5] = a10; // if (res[0]!=0) res[0][5]=a10;
    a10=(a4*a32);
    a10=(a33+a10);
    res[6] = a10; // if (res[0]!=0) res[0][6]=a10;
    res[7] = a37; // if (res[0]!=0) res[0][7]=a37;
    a34=(a8*a34);
    a34=(a34+a41);
    a28=(a4*a28);
    a34=(a34+a28);
    res[8] = a34; // if (res[0]!=0) res[0][8]=a34;
    a16=(a8*a16);
    a16=(a16+a49);
    a44=(a4*a44);
    a16=(a16+a44);
    res[9] = a16; // if (res[0]!=0) res[0][9]=a16;
    a8=(a8*a33);
    a8=(a8+a32);
    a4=(a4*a31);
    a8=(a8+a4);
    res[10] = a8; // if (res[0]!=0) res[0][10]=a8;
    res[11] = a37; // if (res[0]!=0) res[0][11]=a37;
    a37=1.2000000000000000e-01;
    a40=(a37*a40);
    a8=9.9599999999999994e-02;
    a36=(a8*a36);
    a4=-2.0428301480126979e-11;
    a38=(a4*a38);
    a36=(a36+a38);
    a38=-9.9699999999999997e-02;
    a23=(a38*a23);
    a31=-2.0448811822978519e-11;
    a32=(a31*a30);
    a23=(a23+a32);
    a32=-3.9219999999999999e-01;
    a21=(a32*a21);
    a33=1.3330000000000000e-01;
    a30=(a33*a30);
    a21=(a21+a30);
    a30=-4.2499999999999999e-01;
    a18=(a30*a18);
    a16=1.6250000000000001e-01;
    a20=(a16*a20);
    a44=2.0000000000000001e-01;
    a49=(a44*a3);
    a34=-2.2000000000000000e-01;
    a28=(a34*a2);
    a49=(a49-a28);
    a28 = arg[0]; // a28=arg[0]? arg[0][0] : 0;
    a49=(a49+a28);
    a20=(a20+a49);
    a18=(a18+a20);
    a21=(a21+a18);
    a23=(a23+a21);
    a36=(a36+a23);
    a40=(a40+a36);
    res[12] = a40; // if (res[0]!=0) res[0][12]=a40;
    a48=(a37*a48);
    a47=(a8*a47);
    a45=(a4*a45);
    a47=(a47+a45);
    a5=(a38*a5);
    a45=(a31*a46);
    a5=(a5+a45);
    a9=(a32*a9);
    a46=(a33*a46);
    a9=(a9+a46);
    a43=(a30*a43);
    a16=(a16*a1);
    a44=(a44*a2);
    a34=(a34*a3);
    a44=(a44+a34);
    a34 = arg[1]; // a34=arg[0]? arg[0][1] : 0;
    a44=(a44+a34);
    a16=(a16+a44);
    a43=(a43+a16);
    a9=(a9+a43);
    a5=(a5+a9);
    a47=(a47+a5);
    a48=(a48+a47);
    res[13] = a48; // if (res[0]!=0) res[0][13]=a48;
    a37=(a37*a0);
    a8=(a8*a35);
    a4=(a4*a11);
    a8=(a8+a4);
    a38=(a38*a22);
    a31=(a31*a29);
    a38=(a38+a31);
    a32=(a32*a50);
    a33=(a33*a29);
    a32=(a32+a33);
    a30=(a30*a53);
    a53=1.1180951480571861e+00;
    a30=(a30+a53);
    a32=(a32+a30);
    a38=(a38+a32);
    a8=(a8+a38);
    a37=(a37+a8);
    res[14] = a37; // if (res[0]!=0) res[0][14]=a37;
    a37=1.;
    res[15] = a37; // if (res[0]!=0) res[0][15]=a37;
    return 0;
}
int casadi_tool_pose(ADvector arg, ADvector& res){
    /* T_fk:(i0[9])->(o0[4x4]) */
    //read arg.size() = 9
    //同上
    AD<double> a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a3, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a4, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a5, a50, a51, a52, a53, a54, a55, a6, a7, a8, a9;
    a0=6.1232339957367660e-17;
    a1=3.7493994566546440e-33;
    a2=1.2246467991473532e-16;
    a3 = arg[2]; // a3=arg[0]? arg[0][2] : 0;
    a4=cos(a3);
    a5=-7.0710678118654746e-01;
    a3=sin(a3);
    a6=(a5*a3);
    a7=(a0*a6);
    a7=(a4-a7);
    a8=-6.1232339957367660e-17;
    a9=7.0710678118654757e-01;
    a10=(a9*a3);
    a11=(a8*a10);
    a7=(a7-a11);
    a11=(a2*a7);
    a12=(a0*a4);
    a12=(a12-a10);
    a11=(a11-a12);
    a13 = arg[3]; // a13=arg[0]? arg[0][3] : 0;
    a14=cos(a13);
    a15=(a11*a14);
    a16=-1.2246467991473532e-16;
    a12=(a16*a12);
    a12=(a12-a7);
    a13=sin(a13);
    a7=(a12*a13);
    a15=(a15+a7);
    a7 = arg[4]; // a7=arg[0]? arg[0][4] : 0;
    a17=cos(a7);
    a18=(a15*a17);
    a12=(a12*a14);
    a11=(a11*a13);
    a12=(a12-a11);
    a11=-2.0510342851533115e-10;
    a7=sin(a7);
    a19=(a11*a7);
    a20=(a12*a19);
    a18=(a18+a20);
    a20=(a8*a4);
    a20=(a20-a6);
    a10=(a1*a10);
    a20=(a20-a10);
    a10=(a20*a7);
    a18=(a18+a10);
    a10 = arg[5]; // a10=arg[0]? arg[0][5] : 0;
    a6=cos(a10);
    a21=(a18*a6);
    a22=(a11*a17);
    a23=(a12*a22);
    a15=(a15*a7);
    a23=(a23-a15);
    a15=(a20*a17);
    a23=(a23+a15);
    a10=sin(a10);
    a15=(a23*a10);
    a21=(a21+a15);
    a15 = arg[6]; // a15=arg[0]? arg[0][6] : 0;
    a24=cos(a15);
    a25=(a21*a24);
    a23=(a23*a6);
    a26=(a18*a10);
    a23=(a23-a26);
    a15=sin(a15);
    a26=(a23*a15);
    a25=(a25+a26);
    a26 = arg[7]; // a26=arg[0]? arg[0][7] : 0;
    a27=cos(a26);
    a28=(a25*a27);
    a23=(a23*a24);
    a29=(a21*a15);
    a23=(a23-a29);
    a26=sin(a26);
    a29=(a11*a26);
    a30=(a23*a29);
    a28=(a28+a30);
    a30=(a11*a20);
    a30=(a30-a12);
    a12=(a30*a26);
    a28=(a28+a12);
    a12 = arg[8]; // a12=arg[0]? arg[0][8] : 0;
    a31=cos(a12);
    a32=-1.2246467993985327e-16;
    a12=sin(a12);
    a33=(a32*a12);
    a33=(a31+a33);
    a34=(a28*a33);
    a35=(a11*a27);
    a36=(a23*a35);
    a25=(a25*a26);
    a36=(a36-a25);
    a25=(a30*a27);
    a36=(a36+a25);
    a25=(a16*a31);
    a37=-2.0510355098001109e-10;
    a38=(a37*a12);
    a25=(a25+a38);
    a38=(a36*a25);
    a34=(a34+a38);
    a38=(a11*a30);
    a38=(a38-a23);
    a39=(a16*a31);
    a39=(a39-a12);
    a40=(a38*a39);
    a34=(a34+a40);
    a40=(a1*a34);
    a32=(a32*a31);
    a32=(a32-a12);
    a41=(a28*a32);
    a42=(a37*a31);
    a43=(a16*a12);
    a42=(a42-a43);
    a43=(a36*a42);
    a41=(a41+a43);
    a12=(a16*a12);
    a12=(a12+a31);
    a31=(a38*a12);
    a41=(a41-a31);
    a31=(a8*a41);
    a40=(a40+a31);
    a31=1.2246467988961737e-16;
    a28=(a31*a28);
    a28=(a28+a36);
    a43=(a37*a38);
    a28=(a28+a43);
    a40=(a40+a28);
    a43=(a0*a40);
    a44=(a0*a41);
    a44=(a34+a44);
    a43=(a43+a44);
    res[0] = a43; // if (res[0]!=0) res[0][0]=a43;
    a5=(a5*a4);
    a43=(a0*a5);
    a43=(a3+a43);
    a9=(a9*a4);
    a45=(a8*a9);
    a43=(a43+a45);
    a2=(a2*a43);
    a45=(a0*a3);
    a45=(a45+a9);
    a2=(a2-a45);
    a46=(a2*a14);
    a16=(a16*a45);
    a16=(a16-a43);
    a43=(a16*a13);
    a46=(a46+a43);
    a43=(a46*a17);
    a16=(a16*a14);
    a2=(a2*a13);
    a16=(a16-a2);
    a2=(a16*a19);
    a43=(a43+a2);
    a2=(a8*a3);
    a2=(a2+a5);
    a9=(a1*a9);
    a2=(a2+a9);
    a9=(a2*a7);
    a43=(a43+a9);
    a9=(a43*a6);
    a5=(a16*a22);
    a46=(a46*a7);
    a5=(a5-a46);
    a46=(a2*a17);
    a5=(a5+a46);
    a46=(a5*a10);
    a9=(a9+a46);
    a46=(a9*a24);
    a5=(a5*a6);
    a45=(a43*a10);
    a5=(a5-a45);
    a45=(a5*a15);
    a46=(a46+a45);
    a45=(a46*a27);
    a5=(a5*a24);
    a47=(a9*a15);
    a5=(a5-a47);
    a47=(a5*a29);
    a45=(a45+a47);
    a47=(a11*a2);
    a47=(a47-a16);
    a16=(a47*a26);
    a45=(a45+a16);
    a16=(a45*a33);
    a48=(a5*a35);
    a46=(a46*a26);
    a48=(a48-a46);
    a46=(a47*a27);
    a48=(a48+a46);
    a46=(a48*a25);
    a16=(a16+a46);
    a46=(a11*a47);
    a46=(a46-a5);
    a49=(a46*a39);
    a16=(a16+a49);
    a49=(a1*a16);
    a50=(a45*a32);
    a51=(a48*a42);
    a50=(a50+a51);
    a51=(a46*a12);
    a50=(a50-a51);
    a51=(a8*a50);
    a49=(a49+a51);
    a45=(a31*a45);
    a45=(a45+a48);
    a51=(a37*a46);
    a45=(a45+a51);
    a49=(a49+a45);
    a51=(a0*a49);
    a52=(a0*a50);
    a52=(a16+a52);
    a51=(a51+a52);
    res[1] = a51; // if (res[0]!=0) res[0][1]=a51;
    a51=7.0710678118654746e-01;
    a53=(a51*a14);
    a54=8.6595605623549329e-17;
    a55=(a54*a13);
    a53=(a53+a55);
    a55=(a53*a17);
    a54=(a54*a14);
    a51=(a51*a13);
    a54=(a54-a51);
    a19=(a54*a19);
    a55=(a55+a19);
    a19=-7.0710678118654757e-01;
    a51=(a19*a7);
    a55=(a55+a51);
    a51=(a55*a6);
    a22=(a54*a22);
    a53=(a53*a7);
    a22=(a22-a53);
    a19=(a19*a17);
    a22=(a22+a19);
    a19=(a22*a10);
    a51=(a51+a19);
    a19=(a51*a24);
    a22=(a22*a6);
    a10=(a55*a10);
    a22=(a22-a10);
    a10=(a22*a15);
    a19=(a19+a10);
    a10=(a19*a27);
    a22=(a22*a24);
    a15=(a51*a15);
    a22=(a22-a15);
    a29=(a22*a29);
    a10=(a10+a29);
    a29=1.4503002514780097e-10;
    a29=(a29-a54);
    a54=(a29*a26);
    a10=(a10+a54);
    a33=(a10*a33);
    a35=(a22*a35);
    a19=(a19*a26);
    a35=(a35-a19);
    a27=(a29*a27);
    a35=(a35+a27);
    a25=(a35*a25);
    a33=(a33+a25);
    a11=(a11*a29);
    a11=(a11-a22);
    a39=(a11*a39);
    a33=(a33+a39);
    a39=(a1*a33);
    a32=(a10*a32);
    a42=(a35*a42);
    a32=(a32+a42);
    a12=(a11*a12);
    a32=(a32-a12);
    a12=(a8*a32);
    a39=(a39+a12);
    a31=(a31*a10);
    a31=(a31+a35);
    a37=(a37*a11);
    a31=(a31+a37);
    a39=(a39+a31);
    a37=(a0*a39);
    a10=(a0*a32);
    a10=(a33+a10);
    a37=(a37+a10);
    res[2] = a37; // if (res[0]!=0) res[0][2]=a37;
    a37=0.;
    res[3] = a37; // if (res[0]!=0) res[0][3]=a37;
    a12=(a8*a40);
    a42=(a1*a44);
    a12=(a12+a42);
    a34=(a8*a34);
    a34=(a34+a41);
    a28=(a0*a28);
    a34=(a34+a28);
    a12=(a12+a34);
    res[4] = a12; // if (res[0]!=0) res[0][4]=a12;
    a12=(a8*a49);
    a28=(a1*a52);
    a12=(a12+a28);
    a16=(a8*a16);
    a16=(a16+a50);
    a45=(a0*a45);
    a16=(a16+a45);
    a12=(a12+a16);
    res[5] = a12; // if (res[0]!=0) res[0][5]=a12;
    a12=(a8*a39);
    a1=(a1*a10);
    a12=(a12+a1);
    a33=(a8*a33);
    a33=(a33+a32);
    a31=(a0*a31);
    a33=(a33+a31);
    a12=(a12+a33);
    res[6] = a12; // if (res[0]!=0) res[0][6]=a12;
    res[7] = a37; // if (res[0]!=0) res[0][7]=a37;
    a44=(a8*a44);
    a40=(a40+a44);
    a34=(a0*a34);
    a40=(a40+a34);
    res[8] = a40; // if (res[0]!=0) res[0][8]=a40;
    a52=(a8*a52);
    a49=(a49+a52);
    a16=(a0*a16);
    a49=(a49+a16);
    res[9] = a49; // if (res[0]!=0) res[0][9]=a49;
    a8=(a8*a10);
    a39=(a39+a8);
    a0=(a0*a33);
    a39=(a39+a0);
    res[10] = a39; // if (res[0]!=0) res[0][10]=a39;
    res[11] = a37; // if (res[0]!=0) res[0][11]=a37;
    a37=9.9599999999999994e-02;
    a36=(a37*a36);
    a39=-2.0428301480126979e-11;
    a38=(a39*a38);
    a36=(a36+a38);
    a38=-9.9699999999999997e-02;
    a23=(a38*a23);
    a0=-2.0448811822978519e-11;
    a33=(a0*a30);
    a23=(a23+a33);
    a33=-3.9219999999999999e-01;
    a21=(a33*a21);
    a8=1.3330000000000000e-01;
    a30=(a8*a30);
    a21=(a21+a30);
    a30=-4.2499999999999999e-01;
    a18=(a30*a18);
    a10=1.6250000000000001e-01;
    a20=(a10*a20);
    a49=2.0000000000000001e-01;
    a16=(a49*a4);
    a52=-2.2000000000000000e-01;
    a40=(a52*a3);
    a16=(a16-a40);
    a40 = arg[0]; // a40=arg[0]? arg[0][0] : 0;
    a16=(a16+a40);
    a20=(a20+a16);
    a18=(a18+a20);
    a21=(a21+a18);
    a23=(a23+a21);
    a36=(a36+a23);
    res[12] = a36; // if (res[0]!=0) res[0][12]=a36;
    a48=(a37*a48);
    a46=(a39*a46);
    a48=(a48+a46);
    a5=(a38*a5);
    a46=(a0*a47);
    a5=(a5+a46);
    a9=(a33*a9);
    a47=(a8*a47);
    a9=(a9+a47);
    a43=(a30*a43);
    a10=(a10*a2);
    a49=(a49*a3);
    a52=(a52*a4);
    a49=(a49+a52);
    a52 = arg[1]; // a52=arg[0]? arg[0][1] : 0;
    a49=(a49+a52);
    a10=(a10+a49);
    a43=(a43+a10);
    a9=(a9+a43);
    a5=(a5+a9);
    a48=(a48+a5);
    res[13] = a48; // if (res[0]!=0) res[0][13]=a48;
    a37=(a37*a35);
    a39=(a39*a11);
    a37=(a37+a39);
    a38=(a38*a22);
    a0=(a0*a29);
    a38=(a38+a0);
    a33=(a33*a51);
    a8=(a8*a29);
    a33=(a33+a8);
    a30=(a30*a55);
    a55=1.1180951480571861e+00;
    a30=(a30+a55);
    a33=(a33+a30);
    a38=(a38+a33);
    a37=(a37+a38);
    res[14] = a37; // if (res[0]!=0) res[0][14]=a37;
    a37=1.;
    res[15] = a37; // if (res[0]!=0) res[0][15]=a37;
    return 0;
}
int casadi_base_lf(ADvector arg, ADvector& res){
    /* T_fk:(i0[3])->(o0[4x4]) */
    //read arg.size():3
    //['base_y_base_x', 'base_theta_base_y', 'base_link_base_theta']
    AD<double> a0, a1, a2, a3, a4, a5, a6;
    a0 = arg[2]; // a0=arg[0]? arg[0][2] : 0;
    a1=cos(a0);
    res[0] = a1; // if (res[0]!=0) res[0][0]=a1;
    a0=sin(a0);
    res[1] = a0; // if (res[0]!=0) res[0][1]=a0;
    a2=0.;
    res[2] = a2; // if (res[0]!=0) res[0][2]=a2;
    res[3] = a2; // if (res[0]!=0) res[0][3]=a2;
    a3=(-a0);
    res[4] = a3; // if (res[0]!=0) res[0][4]=a3;
    res[5] = a1; // if (res[0]!=0) res[0][5]=a1;
    res[6] = a2; // if (res[0]!=0) res[0][6]=a2;
    res[7] = a2; // if (res[0]!=0) res[0][7]=a2;
    res[8] = a2; // if (res[0]!=0) res[0][8]=a2;
    res[9] = a2; // if (res[0]!=0) res[0][9]=a2;
    a3=1.;
    res[10] = a3; // if (res[0]!=0) res[0][10]=a3;
    res[11] = a2; // if (res[0]!=0) res[0][11]=a2;
    a2=2.0000000000000001e-01;
    a4=(a2*a1);
    a5=1.4999999999999999e-01;
    a6=(a5*a0);
    a4=(a4-a6);
    a6 = arg[0]; // a6=arg[0]? arg[0][0] : 0;
    a4=(a4+a6);
    res[12] = a4; // if (res[0]!=0) res[0][12]=a4;
    a2=(a2*a0);
    a5=(a5*a1);
    a2=(a2+a5);
    a5 = arg[1]; // a5=arg[0]? arg[0][1] : 0;
    a2=(a2+a5);
    res[13] = a2; // if (res[0]!=0) res[0][13]=a2;
    a2=1.6965000000000000e-01;
    res[14] = a2; // if (res[0]!=0) res[0][14]=a2;
    res[15] = a3; // if (res[0]!=0) res[0][15]=a3;
    return 0;
}
int casadi_base_rf(ADvector arg, ADvector& res){
    /* T_fk:(i0[3])->(o0[4x4]) */
    //read arg.size():3
    //['base_y_base_x', 'base_theta_base_y', 'base_link_base_theta']
    AD<double> a0, a1, a2, a3, a4, a5, a6;
    a0 = arg[2]; // a0=arg[0]? arg[0][2] : 0;
    a1=cos(a0);
    res[0] = a1; // if (res[0]!=0) res[0][0]=a1;
    a0=sin(a0);
    res[1] = a0; // if (res[0]!=0) res[0][1]=a0;
    a2=0.;
    res[2] = a2; // if (res[0]!=0) res[0][2]=a2;
    res[3] = a2; // if (res[0]!=0) res[0][3]=a2;
    a3=(-a0);
    res[4] = a3; // if (res[0]!=0) res[0][4]=a3;
    res[5] = a1; // if (res[0]!=0) res[0][5]=a1;
    res[6] = a2; // if (res[0]!=0) res[0][6]=a2;
    res[7] = a2; // if (res[0]!=0) res[0][7]=a2;
    res[8] = a2; // if (res[0]!=0) res[0][8]=a2;
    res[9] = a2; // if (res[0]!=0) res[0][9]=a2;
    a3=1.;
    res[10] = a3; // if (res[0]!=0) res[0][10]=a3;
    res[11] = a2; // if (res[0]!=0) res[0][11]=a2;
    a2=2.0000000000000001e-01;
    a4=(a2*a1);
    a5=-1.4999999999999999e-01;
    a6=(a5*a0);
    a4=(a4-a6);
    a6 = arg[0]; // a6=arg[0]? arg[0][0] : 0;
    a4=(a4+a6);
    res[12] = a4; // if (res[0]!=0) res[0][12]=a4;
    a2=(a2*a0);
    a5=(a5*a1);
    a2=(a2+a5);
    a5 = arg[1]; // a5=arg[0]? arg[0][1] : 0;
    a2=(a2+a5);
    res[13] = a2; // if (res[0]!=0) res[0][13]=a2;
    a2=1.6965000000000000e-01;
    res[14] = a2; // if (res[0]!=0) res[0][14]=a2;
    res[15] = a3; // if (res[0]!=0) res[0][15]=a3;
    return 0;
}
int casadi_base_lr(ADvector arg, ADvector& res)
{
    /* T_fk:(i0[3])->(o0[4x4]) */
    //read arg.size():3
    //['base_y_base_x', 'base_theta_base_y', 'base_link_base_theta']
    AD<double> a0, a1, a2, a3, a4, a5, a6;
    a0 = arg[2]; // a0=arg[0]? arg[0][2] : 0;
    a1=cos(a0);
    res[0] = a1; // if (res[0]!=0) res[0][0]=a1;
    a0=sin(a0);
    res[1] = a0; // if (res[0]!=0) res[0][1]=a0;
    a2=0.;
    res[2] = a2; // if (res[0]!=0) res[0][2]=a2;
    res[3] = a2; // if (res[0]!=0) res[0][3]=a2;
    a3=(-a0);
    res[4] = a3; // if (res[0]!=0) res[0][4]=a3;
    res[5] = a1; // if (res[0]!=0) res[0][5]=a1;
    res[6] = a2; // if (res[0]!=0) res[0][6]=a2;
    res[7] = a2; // if (res[0]!=0) res[0][7]=a2;
    res[8] = a2; // if (res[0]!=0) res[0][8]=a2;
    res[9] = a2; // if (res[0]!=0) res[0][9]=a2;
    a3=1.;
    res[10] = a3; // if (res[0]!=0) res[0][10]=a3;
    res[11] = a2; // if (res[0]!=0) res[0][11]=a2;
    a2=-2.0000000000000001e-01;
    a4=(a2*a1);
    a5=1.4999999999999999e-01;
    a6=(a5*a0);
    a4=(a4-a6);
    a6 = arg[0]; // a6=arg[0]? arg[0][0] : 0;
    a4=(a4+a6);
    res[12] = a4; // if (res[0]!=0) res[0][12]=a4;
    a2=(a2*a0);
    a5=(a5*a1);
    a2=(a2+a5);
    a5 = arg[1]; // a5=arg[0]? arg[0][1] : 0;
    a2=(a2+a5);
    res[13] = a2; // if (res[0]!=0) res[0][13]=a2;
    a2=1.6965000000000000e-01;
    res[14] = a2; // if (res[0]!=0) res[0][14]=a2;
    res[15] = a3; // if (res[0]!=0) res[0][15]=a3;
    return 0;
}
int casadi_base_rr(ADvector arg, ADvector& res)
{
    /* T_fk:(i0[3])->(o0[4x4]) */
    //read arg.size():3
    //['base_y_base_x', 'base_theta_base_y', 'base_link_base_theta']
    AD<double> a0, a1, a2, a3, a4, a5, a6;
    a0 = arg[2]; // a0=arg[0]? arg[0][2] : 0;
    a1=cos(a0);
    res[0] = a1; // if (res[0]!=0) res[0][0]=a1;
    a0=sin(a0);
    res[1] = a0; // if (res[0]!=0) res[0][1]=a0;
    a2=0.;
    res[2] = a2; // if (res[0]!=0) res[0][2]=a2;
    res[3] = a2; // if (res[0]!=0) res[0][3]=a2;
    a3=(-a0);
    res[4] = a3; // if (res[0]!=0) res[0][4]=a3;
    res[5] = a1; // if (res[0]!=0) res[0][5]=a1;
    res[6] = a2; // if (res[0]!=0) res[0][6]=a2;
    res[7] = a2; // if (res[0]!=0) res[0][7]=a2;
    res[8] = a2; // if (res[0]!=0) res[0][8]=a2;
    res[9] = a2; // if (res[0]!=0) res[0][9]=a2;
    a3=1.;
    res[10] = a3; // if (res[0]!=0) res[0][10]=a3;
    res[11] = a2; // if (res[0]!=0) res[0][11]=a2;
    a2=-2.0000000000000001e-01;
    a4=(a2*a1);
    a5=-1.4999999999999999e-01;
    a6=(a5*a0);
    a4=(a4-a6);
    a6 = arg[0]; // a6=arg[0]? arg[0][0] : 0;
    a4=(a4+a6);
    res[12] = a4; // if (res[0]!=0) res[0][12]=a4;
    a2=(a2*a0);
    a5=(a5*a1);
    a2=(a2+a5);
    a5 = arg[1]; // a5=arg[0]? arg[0][1] : 0;
    a2=(a2+a5);
    res[13] = a2; // if (res[0]!=0) res[0][13]=a2;
    a2=1.6965000000000000e-01;
    res[14] = a2; // if (res[0]!=0) res[0][14]=a2;
    res[15] = a3; // if (res[0]!=0) res[0][15]=a3;
    return 0;
}
int main()
{
    //debug left rear
    ADvector arg_lr(3),res_lr(16);
    vector<double> arg_ = {-1.902, 2.5279, 0.7448, 1.939619304326338, -1.3351768777756623, 0.5057964172279568, -1.4690087248185872, 0.20357520395261863, -0.49888491339005947};
    for(int i=0; i<arg_lr.size(); i++)
    {
    arg_lr[i] = AD<double>(arg_[i]);
    }
    casadi_base_lr(arg_lr, res_lr);
    // cout << "T_fk_X: " << res[12] << endl;
    // cout << "T_fk_y: " << res[13] << endl;
    // cout << "T_fk_z: " << res[14] << endl;
    // cout << "T_fk_1: " << res[15] << endl;
    //cout << "T_fk: " << res[0][16] << endl;
    // for(int i=0; i<res_lr.size(); i++)
    // {
    //     cout << "T_fk_" << i << ": " << res_lr[i] << ",";
    //     if(i == )
    // }
    cout << "T_fk_left_rear: " << "\n"
                        << res_lr[0] << "," << res_lr[4] << "," << res_lr[8] << "," << res_lr[12] << "\n"
                        << res_lr[1] << "," << res_lr[5] << "," << res_lr[9] << "," << res_lr[13] << "\n"
                        << res_lr[2] << "," << res_lr[6] << "," << res_lr[10] << "," << res_lr[14] << "\n"
                        << res_lr[3] << "," << res_lr[7] << "," << res_lr[11] << "," << res_lr[15] << endl;
    //debug right rear
    ADvector arg_rr(3),res_rr(16);
    //vector<double> arg_ = {0.174233, 0.407714, 0.245562, 0.00739433, -0.00990916, 0};
    for(int i=0; i<arg_rr.size(); i++)
    {
    arg_rr[i] = AD<double>(arg_[i]);
    }
    casadi_base_rr(arg_rr, res_rr);
    // cout << "T_fk_X: " << res[12] << endl;
    // cout << "T_fk_y: " << res[13] << endl;
    // cout << "T_fk_z: " << res[14] << endl;
    // cout << "T_fk_1: " << res[15] << endl;
    //cout << "T_fk: " << res[0][16] << endl;
    // for(int i=0; i<res_rr.size(); i++)
    // {
    //     cout << "T_fk_" << i << ": " << res_rr[i] << ",";
    //     if(i == )
    // }
    cout << "T_fk_right_rear: " << "\n"
                        << res_rr[0] << "," << res_rr[4] << "," << res_rr[8] << "," << res_rr[12] << "\n"
                        << res_rr[1] << "," << res_rr[5] << "," << res_rr[9] << "," << res_rr[13] << "\n"
                        << res_rr[2] << "," << res_rr[6] << "," << res_rr[10] << "," << res_rr[14] << "\n"
                        << res_rr[3] << "," << res_rr[7] << "," << res_rr[11] << "," << res_rr[15] << endl;
    //debug right front
    ADvector arg_rf(3),res_rf(16);
    //vector<double> arg_ = {0.174233, 0.407714, 0.245562, 0.00739433, -0.00990916, 0};
    for(int i=0; i<arg_rf.size(); i++)
    {
    arg_rf[i] = AD<double>(arg_[i]);
    }
    casadi_base_rf(arg_rf, res_rf);
    // cout << "T_fk_X: " << res[12] << endl;
    // cout << "T_fk_y: " << res[13] << endl;
    // cout << "T_fk_z: " << res[14] << endl;
    // cout << "T_fk_1: " << res[15] << endl;
    //cout << "T_fk: " << res[0][16] << endl;
    // for(int i=0; i<res_rf.size(); i++)
    // {
    //     cout << "T_fk_" << i << ": " << res_rf[i] << ",";
    //     if(i == )
    // }
    cout << "T_fk_right_front: " << "\n"
                        << res_rf[0] << "," << res_rf[4] << "," << res_rf[8] << "," << res_rf[12] << "\n"
                        << res_rf[1] << "," << res_rf[5] << "," << res_rf[9] << "," << res_rf[13] << "\n"
                        << res_rf[2] << "," << res_rf[6] << "," << res_rf[10] << "," << res_rf[14] << "\n"
                        << res_rf[3] << "," << res_rf[7] << "," << res_rf[11] << "," << res_rf[15] << endl;
    //debug shoulder_sphere
    ADvector arg_shoulder(5),res_shoulder(16);
    //vector<double> arg_ = {0.174233, 0.407714, 0.245562, 0.00739433, -0.00990916, 0};
    for(int i=0; i<arg_shoulder.size(); i++)
    {
    arg_shoulder[i] = AD<double>(arg_[i]);
    }
    casadi_shoulder_sphere(arg_shoulder, res_shoulder);
    // cout << "T_fk_X: " << res[12] << endl;
    // cout << "T_fk_y: " << res[13] << endl;
    // cout << "T_fk_z: " << res[14] << endl;
    // cout << "T_fk_1: " << res[15] << endl;
    //cout << "T_fk: " << res[0][16] << endl;
    // for(int i=0; i<res_shoulder.size(); i++)
    // {
    //     cout << "T_fk_" << i << ": " << res_shoulder[i] << ",";
    //     if(i == )
    // }
    cout << "T_fk_shoulder: " << "\n"
                        << res_shoulder[0] << "," << res_shoulder[4] << "," << res_shoulder[8] << "," << res_shoulder[12] << "\n"
                        << res_shoulder[1] << "," << res_shoulder[5] << "," << res_shoulder[9] << "," << res_shoulder[13] << "\n"
                        << res_shoulder[2] << "," << res_shoulder[6] << "," << res_shoulder[10] << "," << res_shoulder[14] << "\n"
                        << res_shoulder[3] << "," << res_shoulder[7] << "," << res_shoulder[11] << "," << res_shoulder[15] << endl;
    //debug elbow_sphere
    ADvector arg_elbow(6),res_elbow(16);
    //vector<double> arg_ = {0.174233, 0.407714, 0.245562, 0.00739433, -0.00990916, 0};
    for(int i=0; i<arg_elbow.size(); i++)
    {
    arg_elbow[i] = AD<double>(arg_[i]);
    }
    casadi_elbow_sphere(arg_elbow, res_elbow);
    // cout << "T_fk_X: " << res[12] << endl;
    // cout << "T_fk_y: " << res[13] << endl;
    // cout << "T_fk_z: " << res[14] << endl;
    // cout << "T_fk_1: " << res[15] << endl;
    //cout << "T_fk: " << res[0][16] << endl;
    // for(int i=0; i<res_elbow.size(); i++)
    // {
    //     cout << "T_fk_" << i << ": " << res_elbow[i] << ",";
    //     if(i == )
    // }
    cout << "T_fk_elbow: " << "\n"
                        << res_elbow[0] << "," << res_elbow[4] << "," << res_elbow[8] << "," << res_elbow[12] << "\n"
                        << res_elbow[1] << "," << res_elbow[5] << "," << res_elbow[9] << "," << res_elbow[13] << "\n"
                        << res_elbow[2] << "," << res_elbow[6] << "," << res_elbow[10] << "," << res_elbow[14] << "\n"
                        << res_elbow[3] << "," << res_elbow[7] << "," << res_elbow[11] << "," << res_elbow[15] << endl;
    //debug wrisr_sphere
    ADvector arg_wrist(7),res_wrist(16);
    //vector<double> arg_ = {0.174233, 0.407714, 0.245562, 0.00739433, -0.00990916, 0};
    for(int i=0; i<arg_wrist.size(); i++)
    {
    arg_wrist[i] = AD<double>(arg_[i]);
    }
    casadi_wrist_sphere(arg_wrist, res_wrist);
    // cout << "T_fk_X: " << res[12] << endl;
    // cout << "T_fk_y: " << res[13] << endl;
    // cout << "T_fk_z: " << res[14] << endl;
    // cout << "T_fk_1: " << res[15] << endl;
    //cout << "T_fk: " << res[0][16] << endl;
    // for(int i=0; i<res_wrist.size(); i++)
    // {
    //     cout << "T_fk_" << i << ": " << res_wrist[i] << ",";
    //     if(i == )
    // }
    cout << "T_fk_wrist: " << "\n"
                        << res_wrist[0] << "," << res_wrist[4] << "," << res_wrist[8] << "," << res_wrist[12] << "\n"
                        << res_wrist[1] << "," << res_wrist[5] << "," << res_wrist[9] << "," << res_wrist[13] << "\n"
                        << res_wrist[2] << "," << res_wrist[6] << "," << res_wrist[10] << "," << res_wrist[14] << "\n"
                        << res_wrist[3] << "," << res_wrist[7] << "," << res_wrist[11] << "," << res_wrist[15] << endl;
    //debug gripper_sphere
    ADvector arg_gripper(9),res_gripper(16);
    //vector<double> arg_ = {0.174233, 0.407714, 0.245562, 0.00739433, -0.00990916, 0};
    for(int i=0; i<arg_gripper.size(); i++)
    {
    arg_gripper[i] = AD<double>(arg_[i]);
    }
    casadi_gripper_sphere(arg_gripper, res_gripper);
    // cout << "T_fk_X: " << res[12] << endl;
    // cout << "T_fk_y: " << res[13] << endl;
    // cout << "T_fk_z: " << res[14] << endl;
    // cout << "T_fk_1: " << res[15] << endl;
    //cout << "T_fk: " << res[0][16] << endl;
    // for(int i=0; i<res_gripper.size(); i++)
    // {
    //     cout << "T_fk_" << i << ": " << res_gripper[i] << ",";
    //     if(i == )
    // }
    cout << "T_fk_gripper: " << "\n"
                        << res_gripper[0] << "," << res_gripper[4] << "," << res_gripper[8] << "," << res_gripper[12] << "\n"
                        << res_gripper[1] << "," << res_gripper[5] << "," << res_gripper[9] << "," << res_gripper[13] << "\n"
                        << res_gripper[2] << "," << res_gripper[6] << "," << res_gripper[10] << "," << res_gripper[14] << "\n"
                        << res_gripper[3] << "," << res_gripper[7] << "," << res_gripper[11] << "," << res_gripper[15] << endl;
    //debug tool_pose
    ADvector arg_tool(9),res_tool(16);
    //vector<double> arg_ = {0.174233, 0.407714, 0.245562, 0.00739433, -0.00990916, 0};
    for(int i=0; i<arg_tool.size(); i++)
    {
    arg_tool[i] = AD<double>(arg_[i]);
    }
    casadi_tool_pose(arg_tool, res_tool);
    // cout << "T_fk_X: " << res[12] << endl;
    // cout << "T_fk_y: " << res[13] << endl;
    // cout << "T_fk_z: " << res[14] << endl;
    // cout << "T_fk_1: " << res[15] << endl;
    //cout << "T_fk: " << res[0][16] << endl;
    // for(int i=0; i<res_tool.size(); i++)
    // {
    //     cout << "T_fk_" << i << ": " << res_tool[i] << ",";
    //     if(i == )
    // }
    cout << "T_fk_tool_pose: " << "\n"
                        << res_tool[0] << "," << res_tool[4] << "," << res_tool[8] << "," << res_tool[12] << "\n"
                        << res_tool[1] << "," << res_tool[5] << "," << res_tool[9] << "," << res_tool[13] << "\n"
                        << res_tool[2] << "," << res_tool[6] << "," << res_tool[10] << "," << res_tool[14] << "\n"
                        << res_tool[3] << "," << res_tool[7] << "," << res_tool[11] << "," << res_tool[15] << endl;
    return 0;
}